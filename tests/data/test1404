<testcase>
# Based on test 1315
<info>
<keywords>
HTTP
HTTP FORMPOST
HTTP file upload
--libfetch
</keywords>
</info>

# Server-side
<reply>
<data>
HTTP/1.1 200 OK
Date: Thu, 29 Jul 2008 14:49:00 GMT
Server: test-server/fake
Content-Length: 0
Connection: close

</data>
</reply>

# Client-side
<client>
<features>
Mime
</features>
<server>
http
</server>
<name>
--libfetch for HTTP RFC1867-type formposting - -F with 3 files, one with explicit type & encoder
</name>
<setenv>
SSL_CERT_FILE=
</setenv>
<command>
http://%HOSTIP:%HTTPPORT/we/want/%TESTNUMBER -F name=value -F 'file=@%LOGDIR/test%TESTNUMBER.txt,%LOGDIR/test%TESTNUMBER.txt;type=magic/content;encoder=8bit,%LOGDIR/test%TESTNUMBER.txt;headers=X-testheader-1: header 1;headers=X-testheader-2: header 2' --libfetch %LOGDIR/test%TESTNUMBER.c
</command>
# We create this file before the command is invoked!
<file name="%LOGDIR/test%TESTNUMBER.txt">
dummy data
</file>
</client>

# Verify data after the test has been "shot"
<verify>
<strip>
-----+\w+
</strip>
<protocol>
POST /we/want/%TESTNUMBER HTTP/1.1
Host: %HOSTIP:%HTTPPORT
User-Agent: fetch/%VERSION
Accept: */*
Content-Length: 930
Content-Type: multipart/form-data; boundary=----------------------------9ef8d6205763

------------------------------9ef8d6205763
Content-Disposition: form-data; name="name"

value
------------------------------9ef8d6205763
Content-Disposition: form-data; name="file"
Content-Type: multipart/mixed; boundary=----------------------------aaaaaaaaaaaa

Content-Disposition: attachment; filename="test%TESTNUMBER.txt"
Content-Type: text/plain

dummy data

------------------------------9ef8d6205763
Content-Disposition: attachment; filename="test%TESTNUMBER.txt"
Content-Type: magic/content
Content-Transfer-Encoding: 8bit

dummy data

------------------------------9ef8d6205763
Content-Disposition: attachment; filename="test%TESTNUMBER.txt"
Content-Type: text/plain
X-testheader-1: header 1
X-testheader-2: header 2

dummy data

------------------------------aaaaaaaaaaaa--

------------------------------9ef8d6205763--
</protocol>
<stripfile>
# fetch's default user-agent varies with version, libraries etc.
s/(USERAGENT, \")[^\"]+/${1}stripped/
# FETCHOPT_SSL_VERIFYPEER, SSH_KNOWNHOSTS and HTTP_VERSION vary with
# configurations - just ignore them
$_ = '' if /FETCHOPT_SSL_VERIFYPEER/
$_ = '' if /FETCHOPT_SSH_KNOWNHOSTS/
$_ = '' if /FETCHOPT_HTTP_VERSION/
$_ = '' if /FETCHOPT_INTERLEAVEDATA/
# FETCH_DOES_CONVERSION generates an extra comment.
$_ = '' if /\/\* "value" \*\//
</stripfile>
<file name="%LOGDIR/test%TESTNUMBER.c" mode="text">
/********* Sample code generated by the fetch command line tool **********
 * All fetch_easy_setopt() options are documented at:
 * https://fetch.se/libfetch/c/fetch_easy_setopt.html
 ************************************************************************/
#include <fetch/fetch.h>

int main(int argc, char *argv[])
{
  FETCHcode ret;
  FETCH *hnd;
  fetch_mime *mime1;
  fetch_mimepart *part1;
  fetch_mime *mime2;
  fetch_mimepart *part2;
  struct fetch_slist *slist1;

  mime1 = NULL;
  mime2 = NULL;
  slist1 = NULL;
  slist1 = fetch_slist_append(slist1, "X-testheader-1: header 1");
  slist1 = fetch_slist_append(slist1, "X-testheader-2: header 2");

  hnd = fetch_easy_init();
  fetch_easy_setopt(hnd, FETCHOPT_BUFFERSIZE, 102400L);
  fetch_easy_setopt(hnd, FETCHOPT_URL, "http://%HOSTIP:%HTTPPORT/we/want/%TESTNUMBER");
  mime1 = fetch_mime_init(hnd);
  part1 = fetch_mime_addpart(mime1);
  fetch_mime_data(part1, "value", FETCH_ZERO_TERMINATED);
  fetch_mime_name(part1, "name");
  part1 = fetch_mime_addpart(mime1);
  mime2 = fetch_mime_init(hnd);
  part2 = fetch_mime_addpart(mime2);
  fetch_mime_filedata(part2, "%LOGDIR/test%TESTNUMBER.txt");
  part2 = fetch_mime_addpart(mime2);
  fetch_mime_filedata(part2, "%LOGDIR/test%TESTNUMBER.txt");
  fetch_mime_encoder(part2, "8bit");
  fetch_mime_type(part2, "magic/content");
  part2 = fetch_mime_addpart(mime2);
  fetch_mime_filedata(part2, "%LOGDIR/test%TESTNUMBER.txt");
  fetch_mime_headers(part2, slist1, 1);
  slist1 = NULL;
  fetch_mime_subparts(part1, mime2);
  mime2 = NULL;
  fetch_mime_name(part1, "file");
  fetch_easy_setopt(hnd, FETCHOPT_MIMEPOST, mime1);
  fetch_easy_setopt(hnd, FETCHOPT_USERAGENT, "stripped");
  fetch_easy_setopt(hnd, FETCHOPT_MAXREDIRS, 50L);
  fetch_easy_setopt(hnd, FETCHOPT_VERBOSE, 1L);
%if ftp
  fetch_easy_setopt(hnd, FETCHOPT_FTP_SKIP_PASV_IP, 1L);
%endif
  fetch_easy_setopt(hnd, FETCHOPT_TCP_KEEPALIVE, 1L);

  /* Here is a list of options the fetch code used that cannot get generated
     as source easily. You may choose to either not use them or implement
     them yourself.

  FETCHOPT_WRITEDATA was set to an object pointer
  FETCHOPT_WRITEFUNCTION was set to a function pointer
  FETCHOPT_READDATA was set to an object pointer
  FETCHOPT_READFUNCTION was set to a function pointer
  FETCHOPT_SEEKDATA was set to an object pointer
  FETCHOPT_SEEKFUNCTION was set to a function pointer
  FETCHOPT_ERRORBUFFER was set to an object pointer
  FETCHOPT_STDERR was set to an object pointer
  FETCHOPT_DEBUGFUNCTION was set to a function pointer
  FETCHOPT_DEBUGDATA was set to an object pointer
  FETCHOPT_HEADERFUNCTION was set to a function pointer
  FETCHOPT_HEADERDATA was set to an object pointer

  */

  ret = fetch_easy_perform(hnd);

  fetch_easy_cleanup(hnd);
  hnd = NULL;
  fetch_mime_free(mime1);
  mime1 = NULL;
  fetch_mime_free(mime2);
  mime2 = NULL;
  fetch_slist_free_all(slist1);
  slist1 = NULL;

  return (int)ret;
}
/**** End of sample code ****/
</file>
</verify>
</testcase>
