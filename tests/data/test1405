<testcase>
# Derived from test227
<info>
<keywords>
FTP
post-quote
pre-quote
--libfetch
</keywords>
</info>
# Server-side
<reply>
<data>
data
    to
      see
that FTP
works
  so does it?
</data>
<servercmd>
REPLY EPSV 500 no such command
REPLY FAIL 500 this might not be a failure!
</servercmd>
</reply>

# Client-side
<client>
<server>
ftp
</server>
<name>
--libfetch for FTP with quote ops
</name>
<setenv>
SSL_CERT_FILE=
</setenv>
<command>
ftp://%HOSTIP:%FTPPORT/%TESTNUMBER -Q "NOOP 1" -Q "+NOOP 2" -Q "-NOOP 3" -Q "*FAIL" -Q "+*FAIL HARD" --libfetch %LOGDIR/test%TESTNUMBER.c
</command>
</client>

# Verify data after the test has been "shot"
<verify>
<strip>
QUIT
</strip>
<protocol>
USER anonymous
PASS ftp@example.com
PWD
NOOP 1
FAIL
EPSV
PASV
TYPE I
NOOP 2
FAIL HARD
SIZE %TESTNUMBER
RETR %TESTNUMBER
NOOP 3
QUIT
</protocol>
<file name="%LOGDIR/test%TESTNUMBER.c" mode="text">
/********* Sample code generated by the fetch command line tool **********
 * All fetch_easy_setopt() options are documented at:
 * https://fetch.se/libfetch/c/fetch_easy_setopt.html
 ************************************************************************/
#include <fetch/fetch.h>

int main(int argc, char *argv[])
{
  FETCHcode ret;
  FETCH *hnd;
  struct fetch_slist *slist1;
  struct fetch_slist *slist2;
  struct fetch_slist *slist3;

  slist1 = NULL;
  slist1 = fetch_slist_append(slist1, "NOOP 1");
  slist1 = fetch_slist_append(slist1, "*FAIL");
  slist2 = NULL;
  slist2 = fetch_slist_append(slist2, "NOOP 3");
  slist3 = NULL;
  slist3 = fetch_slist_append(slist3, "NOOP 2");
  slist3 = fetch_slist_append(slist3, "*FAIL HARD");

  hnd = fetch_easy_init();
  fetch_easy_setopt(hnd, FETCHOPT_BUFFERSIZE, 102400L);
  fetch_easy_setopt(hnd, FETCHOPT_URL, "ftp://%HOSTIP:%FTPPORT/%TESTNUMBER");
  fetch_easy_setopt(hnd, FETCHOPT_QUOTE, slist1);
  fetch_easy_setopt(hnd, FETCHOPT_POSTQUOTE, slist2);
  fetch_easy_setopt(hnd, FETCHOPT_PREQUOTE, slist3);
  fetch_easy_setopt(hnd, FETCHOPT_VERBOSE, 1L);
  fetch_easy_setopt(hnd, FETCHOPT_FTP_SKIP_PASV_IP, 1L);
  fetch_easy_setopt(hnd, FETCHOPT_TCP_KEEPALIVE, 1L);

  /* Here is a list of options the fetch code used that cannot get generated
     as source easily. You may choose to either not use them or implement
     them yourself.

  FETCHOPT_WRITEDATA was set to an object pointer
  FETCHOPT_WRITEFUNCTION was set to a function pointer
  FETCHOPT_READDATA was set to an object pointer
  FETCHOPT_READFUNCTION was set to a function pointer
  FETCHOPT_SEEKDATA was set to an object pointer
  FETCHOPT_SEEKFUNCTION was set to a function pointer
  FETCHOPT_ERRORBUFFER was set to an object pointer
  FETCHOPT_STDERR was set to an object pointer
  FETCHOPT_DEBUGFUNCTION was set to a function pointer
  FETCHOPT_DEBUGDATA was set to an object pointer
  FETCHOPT_HEADERFUNCTION was set to a function pointer
  FETCHOPT_HEADERDATA was set to an object pointer

  */

  ret = fetch_easy_perform(hnd);

  fetch_easy_cleanup(hnd);
  hnd = NULL;
  fetch_slist_free_all(slist1);
  slist1 = NULL;
  fetch_slist_free_all(slist2);
  slist2 = NULL;
  fetch_slist_free_all(slist3);
  slist3 = NULL;

  return (int)ret;
}
/**** End of sample code ****/
</file>
<stripfile>
# FETCHOPT_USERAGENT and FETCHOPT_MAXREDIRS requires HTTP protocol
# FETCHOPT_INTERLEAVEDATA requires RTSP (HTTP) protocol
# support, IOW depends on configuration - just ignore these.
$_ = '' if /FETCHOPT_USERAGENT/
$_ = '' if /FETCHOPT_MAXREDIRS/
# FETCHOPT_SSL_VERIFYPEER, SSH_KNOWNHOSTS and HTTP_VERSION vary with
# configurations - just ignore them
$_ = '' if /FETCHOPT_SSL_VERIFYPEER/
$_ = '' if /FETCHOPT_SSH_KNOWNHOSTS/
$_ = '' if /FETCHOPT_HTTP_VERSION/
$_ = '' if /FETCHOPT_HTTP09_ALLOWED/
$_ = '' if /FETCHOPT_INTERLEAVEDATA/
</stripfile>
</verify>
</testcase>
