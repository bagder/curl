<testcase>
# Based on test900
# N.B. --libfetch output not sufficient to deal with uploaded files.
<info>
<keywords>
SMTP
--libfetch
</keywords>
</info>

#
# Server-side
<reply>
<servercmd>
CAPA SIZE
</servercmd>
</reply>

#
# Client-side
<client>
<server>
smtp
</server>
<name>
--libfetch for SMTP
</name>
<setenv>
SSL_CERT_FILE=
</setenv>
<file name="%LOGDIR/test%TESTNUMBER.eml">
From: different
To: another

body
</file>
<command>
smtp://%HOSTIP:%SMTPPORT/%TESTNUMBER --mail-rcpt recipient.one@example.com --mail-rcpt recipient.two@example.com --mail-from sender@example.com -T %LOGDIR/test%TESTNUMBER.eml --libfetch %LOGDIR/test%TESTNUMBER.c
</command>
# Need ftp so the FTP options are written in the --libfetch template
<features>
ftp
</features>
</client>

#
# Verify data after the test has been "shot"
<verify>
<protocol>
EHLO %TESTNUMBER
MAIL FROM:<sender@example.com> SIZE=38
RCPT TO:<recipient.one@example.com>
RCPT TO:<recipient.two@example.com>
DATA
QUIT
</protocol>
<upload>
From: different
To: another

body
.
</upload>
<file name="%LOGDIR/test%TESTNUMBER.c" mode="text">
/********* Sample code generated by the fetch command line tool **********
 * All fetch_easy_setopt() options are documented at:
 * https://fetch.se/libfetch/c/fetch_easy_setopt.html
 ************************************************************************/
#include <fetch/fetch.h>

int main(int argc, char *argv[])
{
  FETCHcode ret;
  FETCH *hnd;
  struct fetch_slist *slist1;

  slist1 = NULL;
  slist1 = fetch_slist_append(slist1, "recipient.one@example.com");
  slist1 = fetch_slist_append(slist1, "recipient.two@example.com");

  hnd = fetch_easy_init();
  fetch_easy_setopt(hnd, FETCHOPT_BUFFERSIZE, 102400L);
  fetch_easy_setopt(hnd, FETCHOPT_URL, "smtp://%HOSTIP:%SMTPPORT/%TESTNUMBER");
  fetch_easy_setopt(hnd, FETCHOPT_UPLOAD, 1L);
  fetch_easy_setopt(hnd, FETCHOPT_VERBOSE, 1L);
  fetch_easy_setopt(hnd, FETCHOPT_FTP_SKIP_PASV_IP, 1L);
  fetch_easy_setopt(hnd, FETCHOPT_TCP_KEEPALIVE, 1L);
  fetch_easy_setopt(hnd, FETCHOPT_MAIL_FROM, "sender@example.com");
  fetch_easy_setopt(hnd, FETCHOPT_MAIL_RCPT, slist1);
  fetch_easy_setopt(hnd, FETCHOPT_INFILESIZE_LARGE, (fetch_off_t)38);

  /* Here is a list of options the fetch code used that cannot get generated
     as source easily. You may choose to either not use them or implement
     them yourself.

  FETCHOPT_WRITEDATA was set to an object pointer
  FETCHOPT_WRITEFUNCTION was set to a function pointer
  FETCHOPT_READDATA was set to an object pointer
  FETCHOPT_READFUNCTION was set to a function pointer
  FETCHOPT_SEEKDATA was set to an object pointer
  FETCHOPT_SEEKFUNCTION was set to a function pointer
  FETCHOPT_ERRORBUFFER was set to an object pointer
  FETCHOPT_STDERR was set to an object pointer
  FETCHOPT_DEBUGFUNCTION was set to a function pointer
  FETCHOPT_DEBUGDATA was set to an object pointer
  FETCHOPT_HEADERFUNCTION was set to a function pointer
  FETCHOPT_HEADERDATA was set to an object pointer

  */

  ret = fetch_easy_perform(hnd);

  fetch_easy_cleanup(hnd);
  hnd = NULL;
  fetch_slist_free_all(slist1);
  slist1 = NULL;

  return (int)ret;
}
/**** End of sample code ****/
</file>
<stripfile>
# These options vary with configurations - just ignore them
# FETCHOPT_INTERLEAVEDATA requires RTSP (HTTP) protocol
$_ = '' if /FETCHOPT_USERAGENT/
$_ = '' if /FETCHOPT_MAXREDIRS/
$_ = '' if /FETCHOPT_SSL_VERIFYPEER/
$_ = '' if /FETCHOPT_SSH_KNOWNHOSTS/
$_ = '' if /FETCHOPT_HTTP_VERSION/
$_ = '' if /FETCHOPT_HTTP09_ALLOWED/
$_ = '' if /FETCHOPT_INTERLEAVEDATA/
</stripfile>
</verify>
</testcase>
