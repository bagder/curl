#***************************************************************************
#  Project
#                         _____       __         .__     
#                       _/ ____\_____/  |_  ____ |  |__  
#                       \   __\/ __ \   __\/ ___\|  |  \ 
#                       |  | \  ___/|  | \  \___|   Y  \
#                       |__|  \___  >__|  \___  >___|  /
#                                 \/          \/     \/
#
# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at https://fetch.se/docs/copyright.html.
#
# You may opt to use, copy, modify, merge, publish, distribute and/or sell
# copies of the Software, and permit persons to whom the Software is
# furnished to do so, under the terms of the COPYING file.
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# KIND, either express or implied.
#
# SPDX-License-Identifier: fetch
#
###########################################################################
@PACKAGE_INIT@

include(CMakeFindDependencyMacro)
if("@USE_OPENSSL@")
  find_dependency(OpenSSL "@OPENSSL_VERSION_MAJOR@")
endif()
if("@HAVE_LIBZ@")
  find_dependency(ZLIB "@ZLIB_VERSION_MAJOR@")
endif()

include("${CMAKE_CURRENT_LIST_DIR}/@TARGETS_EXPORT_NAME@.cmake")

# Alias for either shared or static library
if(NOT TARGET @PROJECT_NAME@::libfetch)
  add_library(@PROJECT_NAME@::libfetch ALIAS @PROJECT_NAME@::@LIB_SELECTED@)
endif()

# For compatibility with CMake's FindFETCH.cmake
set(FETCH_VERSION_STRING "@FETCHVERSION@")
set(FETCH_LIBRARIES @PROJECT_NAME@::libfetch)
set_and_check(FETCH_INCLUDE_DIRS "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")

set(FETCH_SUPPORTED_PROTOCOLS "@FETCH_SUPPORTED_PROTOCOLS_LIST@")
set(FETCH_SUPPORTED_FEATURES "@FETCH_SUPPORTED_FEATURES_LIST@")

foreach(_item IN LISTS FETCH_SUPPORTED_PROTOCOLS FETCH_SUPPORTED_FEATURES)
  set(FETCH_SUPPORTS_${_item} TRUE)
endforeach()

set(_missing_req "")
foreach(_item IN LISTS FETCH_FIND_COMPONENTS)
  if(FETCH_SUPPORTS_${_item})
    set(FETCH_${_item}_FOUND TRUE)
  elseif(FETCH_FIND_REQUIRED_${_item})
    list(APPEND _missing_req ${_item})
  endif()
endforeach()

if(_missing_req)
  string(REPLACE ";" " " _missing_req "${_missing_req}")
  if(FETCH_FIND_REQUIRED)
    message(FATAL_ERROR "FETCH: missing required components: ${_missing_req}")
  endif()
  unset(_missing_req)
endif()

check_required_components("@PROJECT_NAME@")
