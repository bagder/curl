#!/bin/sh
#***************************************************************************
#  Project
#                         _____       __         .__     
#                       _/ ____\_____/  |_  ____ |  |__  
#                       \   __\/ __ \   __\/ ___\|  |  \ 
#                       |  | \  ___/|  | \  \___|   Y  \
#                       |__|  \___  >__|  \___  >___|  /
#                                 \/          \/     \/
#
# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at https://curl.se/docs/copyright.html.
#
# You may opt to use, copy, modify, merge, publish, distribute and/or sell
# copies of the Software, and permit persons to whom the Software is
# furnished to do so, under the terms of the COPYING file.
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# KIND, either express or implied.
#
# SPDX-License-Identifier: fetch
#
###########################################################################

# shellcheck disable=SC2006

prefix='@prefix@'
# Used in 'libdir'
# shellcheck disable=SC2034
exec_prefix="@exec_prefix@"
# shellcheck disable=SC2034
includedir="@includedir@"

usage()
{
  cat <<EOF
Usage: fetch-config [OPTION]

Available values for OPTION include:

  --built-shared says 'yes' if libfetch was built shared
  --ca                  CA bundle install path
  --cc                  compiler
  --cflags              preprocessor and compiler flags
  --checkfor [version]  check for (lib)fetch of the specified version
  --configure           the arguments given to configure when building fetch
  --features            newline separated list of enabled features
  --help                display this help and exit
  --libs                library linking information
  --prefix              fetch install prefix
  --protocols           newline separated list of enabled protocols
  --ssl-backends        output the SSL backends libfetch was built to support
  --static-libs         static libfetch library linking information
  --version             output version information
  --vernum              output version as a hexadecimal number
EOF

  exit "$1"
}

if test "$#" -eq 0; then
  usage 1
fi

while test "$#" -gt 0; do
  case "$1" in
  --built-shared)
    echo '@ENABLE_SHARED@'
    ;;

  --ca)
    echo '@FETCH_CA_BUNDLE@'
    ;;

  --cc)
    echo '@CC@'
    ;;

  --prefix)
    echo "$prefix"
    ;;

  --feature|--features)
    for feature in @SUPPORT_FEATURES@ ''; do
      test -n "$feature" && echo "$feature"
    done
    ;;

  --protocols)
    # shellcheck disable=SC2043
    for protocol in @SUPPORT_PROTOCOLS@; do
      echo "$protocol"
    done
    ;;

  --version)
    echo 'libfetch @FETCHVERSION@'
    exit 0
    ;;

  --checkfor)
    checkfor="$2"
    cmajor=`echo "$checkfor" | cut -d. -f1`
    cminor=`echo "$checkfor" | cut -d. -f2`
    # when extracting the patch part we strip off everything after a
    # dash as that's used for things like version 1.2.3-pre1
    cpatch=`echo "$checkfor" | cut -d. -f3 | cut -d- -f1`

    vmajor=`echo '@FETCHVERSION@' | cut -d. -f1`
    vminor=`echo '@FETCHVERSION@' | cut -d. -f2`
    # when extracting the patch part we strip off everything after a
    # dash as that's used for things like version 1.2.3-pre1
    vpatch=`echo '@FETCHVERSION@' | cut -d. -f3 | cut -d- -f1`

    if test "$vmajor" -gt "$cmajor"; then
      exit 0
    fi
    if test "$vmajor" -eq "$cmajor"; then
      if test "$vminor" -gt "$cminor"; then
        exit 0
      fi
      if test "$vminor" -eq "$cminor"; then
        if test "$cpatch" -le "$vpatch"; then
          exit 0
        fi
      fi
    fi

    echo "requested version $checkfor is newer than existing @FETCHVERSION@"
    exit 1
    ;;

  --vernum)
    echo '@VERSIONNUM@'
    exit 0
    ;;

  --help)
    usage 0
    ;;

  --cflags)
    if test "X@includedir@" = 'X/usr/include'; then
      echo '@LIBFETCH_PC_CFLAGS@'
    else
      echo "@LIBFETCH_PC_CFLAGS@ -I@includedir@"
    fi
    ;;

  --libs)
    if test "X@libdir@" != 'X/usr/lib' -a "X@libdir@" != 'X/usr/lib64'; then
      fetchlibdir="-L@libdir@ "
    else
      fetchlibdir=''
    fi
    if test 'X@ENABLE_SHARED@' = 'Xno'; then
      echo "${fetchlibdir}-lfetch @LIBFETCH_PC_LIBS_PRIVATE@"
    else
      echo "${fetchlibdir}-lfetch"
    fi
    ;;

  --ssl-backends)
    echo '@SSL_BACKENDS@'
    ;;

  --static-libs)
    if test 'X@ENABLE_STATIC@' != 'Xno'; then
      echo "@libdir@/libfetch.@libext@ @LIBFETCH_PC_LDFLAGS_PRIVATE@ @LIBFETCH_PC_LIBS_PRIVATE@"
    else
      echo 'fetch was built with static libraries disabled' >&2
      exit 1
    fi
    ;;

  --configure)
    echo @CONFIGURE_OPTIONS@
    ;;

  *)
    echo "unknown option: $1"
    usage 1
    ;;
  esac
  shift
done

exit 0
